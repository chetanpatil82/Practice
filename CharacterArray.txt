package training.ideas.java.characterarray;


import org.junit.Assert;
import org.junit.Test;

/**
* Created by idntam on 8/15/2014.
*/
public class CharacterArrayTest {

    @Test
public void given_two_character_array_return_concatenate_array()
    {
        char first[]={'a','b','c','d'};
        char second[]={'i','j','k','l'};
       char expectedOutput[]={'a','b','c','d','i','j','k','l'} ;
       Assert.assertArrayEquals(expectedOutput,CharacterArray.concatenation(first,second));

    }

    @Test
    public void given_two_character_array_return_concatenate_arrays()
    {
        char first[]={'a','b'};
        char second[]={'i','j','k','l'};
        char expectedOutput[]={'a','b','i','j','k','l'} ;
        Assert.assertArrayEquals(expectedOutput,CharacterArray.concatenation(first,second));

    }

    @Test
    public void given_character_array_and_character_return_index_of_the_character()
    {
        char inputCharacters[]={'a','d','g','t','j','w','g'};
        char givenCharacter='g';
        int expectedIndex=2;
        junit.framework.Assert.assertEquals(expectedIndex,CharacterArray.findIndex(inputCharacters,givenCharacter));
    }

    @Test
    public void given_character_array_and_nonExisting_character_return_index_of_the_character()
    {
        char inputCharacters[]={'a','d','g','t','j','w','g'};
        char givenCharacter='k';
        int expectedIndex=-1;
        junit.framework.Assert.assertEquals(expectedIndex,CharacterArray.findIndex(inputCharacters,givenCharacter));
    }

    @Test
    public void given_character_array_with_an_index_and_character_return_next_index_of_the_character()
    {
        char inputCharacters[]={'a','d','g','t','j','w','g'};
        char givenCharacter='g';
        int givenIndex=2;
        int expectedIndex=6;
        junit.framework.Assert.assertEquals(expectedIndex,CharacterArray.findNextIndex(inputCharacters, givenCharacter, givenIndex));
    }

    @Test
    public void given_character_array_with_an_index_and_character_return_next_occurring_index_of_the_character()
    {
        char inputCharacters[]={'a','d','g','t','j','w','g'};
        char givenCharacter='d';
        int givenIndex=1;
        int expectedIndex=-1;
        junit.framework.Assert.assertEquals(expectedIndex,CharacterArray.findNextIndex(inputCharacters, givenCharacter, givenIndex));
    }

    @Test
    public void given_character_array_return_uppercase_array()
    {
        char givenArray[]={'a','f','e','v','b'};
        char expectedArray[]={'A','F','E','V','B'};
        Assert.assertArrayEquals(expectedArray,CharacterArray.upperCaseConversion(givenArray));
    }

    @Test
    public void given_character_array_with_mixed_characters_return_uppercase_array()
    {
        char givenArray[]={'a','F','E','v','b'};
        char expectedArray[]={'A','F','E','V','B'};
        Assert.assertArrayEquals(expectedArray,CharacterArray.upperCaseConversion(givenArray));
    }

    @Test
    public void given_character_array_return_lowercase_array()
    {
        char givenArray[]={'A','F','E','V','B'};
        char expectedArray[]={'a','f','e','v','b'};
        Assert.assertArrayEquals(expectedArray,CharacterArray.lowerCaseConversion(givenArray));
    }

    @Test
    public void given_character_array_with_mixed_characters_return_lowercase_array()
    {
        char givenArray[]={'A','F','e','v','B'};
        char expectedArray[]={'a','f','e','v','b'};
        Assert.assertArrayEquals(expectedArray,CharacterArray.lowerCaseConversion(givenArray));
    }

    @Test
    public void given_two_character_arrays_return_index_of_first_occurrence_of_second_array()
    {
        char firstArray[]={'t','h','i','s','i','s','t','e','s','t'};
        char secondArray[]={'t','e','s','t'};
        int expectedIndex=6;
        junit.framework.Assert.assertEquals(expectedIndex,CharacterArray.occurrenceOfSecondArray(firstArray,secondArray));
    }

    @Test
    public void given_two_character_arrays_return_first_index_of_occurrence_of_second_array()
    {
        char firstArray[]={'i','n','d','i','a','d','i'};
        char secondArray[]={'d','i'};
        int expectedIndex=2;
        junit.framework.Assert.assertEquals(expectedIndex,CharacterArray.occurrenceOfSecondArray(firstArray,secondArray));
    }

    @Test
    public void given_two_character_arrays_return_occurrence_of_second_array_for_given_index()
    {
        char firstArray[]={'t','h','i','s','i','s','t','h','i','s'};
        char secondArray[]={'t','h','i','s'};
        int givenIndex=2;
        int expectedIndex=6;
        junit.framework.Assert.assertEquals(expectedIndex,CharacterArray.occurrenceOfSecondArrayForGivenIndex(firstArray,secondArray,givenIndex));
    }

    @Test
    public void given_character_array_and_an_end_index_return_subArray()
    {
        char givenArray[]={'a','b','c','d','e','f'};
        int endIndex=4;
        char expectedArray[]={'a','b','c','d','e'};
        Assert.assertArrayEquals(expectedArray,CharacterArray.subArrayEndIndex(givenArray,endIndex));
    }

    @Test
    public void given_character_array_start_index_and_an_end_index_return_subArray()
    {
        char givenArray[]={'a','b','c','d','e','f'};
        int startIndex=1;
        int endIndex=4;
        char expectedArray[]={'b','c','d','e'};
        Assert.assertArrayEquals(expectedArray,CharacterArray.subArrayStartIndexEndIndex(givenArray, startIndex, endIndex));
    }

    @Test
    public void given_character_array_and_character_return_occurrence_of_the_character()
    {
        char givenArray[]={'a','b','c','d','c','e','f','c'};
        char givenCharacter='c';
        int occurrence=3;
        junit.framework.Assert.assertEquals(occurrence,CharacterArray.occurrenceOfGivenCharacter(givenArray,givenCharacter));
    }

    @Test
    public void given_character_array_and_wrong_character_return_occurrence_of_the_character()
    {
        char givenArray[]={'a','b','c','d','c','e','f','c'};
        char givenCharacter='z';
        int occurrence=-1;
        junit.framework.Assert.assertEquals(occurrence,CharacterArray.occurrenceOfGivenCharacter(givenArray,givenCharacter));
    }
}





package training.ideas.java.characterarray;

/**
* Created by idntam on 8/15/2014.
*/
public class CharacterArray {
    public static char[] concatenation(char[] first, char[] second) {

        int lengthOfFirst=first.length;
        int lengthOfSecond=second.length;
        char resultCharacter[]=new char[lengthOfFirst+lengthOfSecond];
        System.arraycopy(first,0,resultCharacter,0,lengthOfFirst);
        System.arraycopy(second,0,resultCharacter,lengthOfFirst,lengthOfSecond);
//        for(int i =0;i<lengthOfFirst;i++)
//        {
//            resultCharacter[i]=first[i];
//        }
//        for(int j=0;j<lengthOfSecond;j++)
//        {
//            resultCharacter[j+lengthOfFirst]=second[j];
//        }
        return resultCharacter;
    }


    public static int findIndex(char[] inputCharacters, char givenCharacter) {
        int resultIndex=0;

        for(int indexCounter=0;indexCounter<inputCharacters.length;indexCounter++)
        {
            if(inputCharacters[indexCounter]==givenCharacter)
            {
                resultIndex=indexCounter;
                break;
            }
            else
            {
                resultIndex=-1;
            }
        }
        return resultIndex;
    }

    public static int findNextIndex(char[] inputCharacters, char givenCharacter, int givenIndex) {
        int resultIndex=0;
        for(int indexCounter=givenIndex+1;indexCounter<inputCharacters.length;indexCounter++)
        {
            if(inputCharacters[indexCounter]==givenCharacter)
            {
                resultIndex=indexCounter;
                break;
            }
            else
            {
                resultIndex=-1;
            }
        }

        return resultIndex;
    }

    public static char[] upperCaseConversion(char[] givenArray) {
        char resultArray[]=new char[givenArray.length];
        for(int indexCounter=0;indexCounter<givenArray.length;indexCounter++)
        {
            resultArray[indexCounter]=Character.toUpperCase(givenArray[indexCounter]);
        }

        return resultArray;
    }

    public static char[] lowerCaseConversion(char[] givenArray) {
        char resultArray[]=new char[givenArray.length];
        for(int indexCounter=0;indexCounter<givenArray.length;indexCounter++)
        {
            resultArray[indexCounter]=Character.toLowerCase(givenArray[indexCounter]);
        }

        return resultArray;
    }


    public static char[] subArrayEndIndex(char[] givenArray, int endIndex) {
        char resultArray[]=new char[endIndex+1];
        for(int indexCounter=0;indexCounter<=endIndex;indexCounter++)
        {
            resultArray[indexCounter]=givenArray[indexCounter];
        }
        return resultArray;
    }

    public static char[] subArrayStartIndexEndIndex(char[] givenArray, int startIndex, int endIndex) {
        int length=(endIndex-startIndex)+1;
        char resultArray[]=new char[length];
        for(int indexCounter=0;indexCounter<length;indexCounter++)
        {
            resultArray[indexCounter]=givenArray[indexCounter+startIndex];
        }
        return resultArray;
    }

    public static int occurrenceOfGivenCharacter(char[] givenArray, char givenCharacter) {
        int count=0;
        for(int indexCounter=0;indexCounter<givenArray.length;indexCounter++)
        {
            if(givenArray[indexCounter]==givenCharacter)
            {
                count++;
            }
            else
            {
                count=-1;
            }
        }
        return count;
    }

    public static int occurrenceOfSecondArray(char[] firstArray, char[] secondArray) {
        int resultIndex=0;

        int indexCounter,compareCounter,element;

        for(indexCounter=0;indexCounter<firstArray.length;indexCounter++)
        {
               element=indexCounter;
            for (compareCounter=0;compareCounter<secondArray.length;compareCounter++)
            {
                if(firstArray[element]==secondArray[compareCounter])
                {
                    element++;
                }
                else
                    break;
            }
            if(compareCounter==secondArray.length)
            {
                resultIndex=indexCounter;
                break;
            }

        }

        return resultIndex;
    }

    public static int occurrenceOfSecondArrayForGivenIndex(char[] firstArray, char[] secondArray, int givenIndex) {
        int resultIndex=0;

        int indexCounter,compareCounter,element;

        for(indexCounter=givenIndex;indexCounter<firstArray.length;indexCounter++)
        {
            element=indexCounter;
            for (compareCounter=0;compareCounter<secondArray.length;compareCounter++)
            {
                if(firstArray[element]==secondArray[compareCounter])
                {
                    element++;
                }
                else
                    break;
            }
            if(compareCounter==secondArray.length)
            {
                resultIndex=indexCounter;
                break;
            }

        }

        return resultIndex;
    }
}
